--- a/thd_dset_to_vectim.c
+++ b/thd_dset_to_vectim.c
@@ -73,9 +73,9 @@ ENTRY("THD_dset_to_vectim") ;
    }
 
    if( ignore > 0 ){  /* extract 1 at a time, save what we want */
-
+     float *var;
 #pragma omp critical (MALLOC)
-     float *var = (float *)malloc(sizeof(float)*(nvals+ignore)) ;
+     var = (float *)malloc(sizeof(float)*(nvals+ignore)) ;
      for( kk=iv=0 ; iv < nvox ; iv++ ){
        if( mmm[iv] == 0 ) continue ;
        (void)THD_extract_array( iv , dset , 0 , var ) ;
@@ -291,9 +291,9 @@ ENTRY("THD_dset_to_vectim_stend") ;
    }
 
    if( nvals < DSET_NVALS(dset) ){ /* extract 1 at a time, save what we want */
-
+     float *var;
 #pragma omp critical (MALLOC)
-     float *var = (float *)malloc(sizeof(float)*(DSET_NVALS(dset))) ;
+     var = (float *)malloc(sizeof(float)*(DSET_NVALS(dset))) ;
      for( kk=iv=0 ; iv < nvox ; iv++ ){
        if( mmm[iv] == 0 ) continue ;
        (void)THD_extract_array( iv , dset , 0 , var ) ;
@@ -458,9 +458,9 @@ ENTRY("THD_2dset_to_vectim") ;
    }
 
    if( ignore > 0 ){  /* extract 1 at a time, save what we want */
-
+     float *var;
 #pragma omp critical (MALLOC)
-     float *var = (float *)malloc(sizeof(float)*(nvals+ignore)) ;
+     var = (float *)malloc(sizeof(float)*(nvals+ignore)) ;
      mmmt = mmmv[0];
      for( kk=iv=0 ; iv < nvoxv[0] ; iv++ ){
        if( mmmt[iv] == 0 ) continue ;
